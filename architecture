test/test_netcdf_output_writer.jl:        architecture = arch,
test/regression_tests/hydrostatic_free_turbulence_regression_test.jl:                                architecture = arch,
test/test_hydrostatic_free_surface_immersed_boundaries.jl:                                                architecture = arch, 
test/test_regression.jl:                                  architecture = arch,
test/test_vertical_vorticity_field.jl:                                                architecture = arch)
test/test_cubed_spheres.jl:                  architecture = arch,
validation/solid_body_rotation/solid_body_rotation.jl:                                        architecture = architecture,
validation/solid_body_rotation/solid_body_tracer_advection.jl:                                        architecture = architecture,
validation/bickley_jet/bickley_jet.jl:    model = HydrostaticFreeSurfaceModel(      architecture = arch,
validation/convergence_tests/src/OneDimensionalGaussianAdvectionDiffusion.jl:    model = NonhydrostaticModel(architecture = architecture,
validation/convergence_tests/src/OneDimensionalGaussianAdvectionDiffusion.jl:    model = NonhydrostaticModel(architecture = architecture,
validation/convergence_tests/src/OneDimensionalGaussianAdvectionDiffusion.jl:    model = NonhydrostaticModel(architecture = architecture,
validation/convergence_tests/src/DoublyPeriodicTaylorGreen.jl:    model = NonhydrostaticModel(architecture = architecture,
validation/convergence_tests/src/PointExponentialDecay.jl:    model = NonhydrostaticModel(architecture = architecture,
validation/convergence_tests/src/TwoDimensionalDiffusion.jl:    model = NonhydrostaticModel(architecture = architecture,
validation/convergence_tests/src/ForcedFlowFreeSlip.jl:    model = NonhydrostaticModel(architecture = architecture,
validation/convergence_tests/src/ForcedFlowFreeSlip.jl:    model = NonhydrostaticModel(architecture = architecture,
validation/convergence_tests/src/OneDimensionalCosineAdvectionDiffusion.jl:    model = NonhydrostaticModel(architecture = architecture,
validation/convergence_tests/src/OneDimensionalCosineAdvectionDiffusion.jl:    model = NonhydrostaticModel(architecture = architecture,
validation/convergence_tests/src/OneDimensionalCosineAdvectionDiffusion.jl:    model = NonhydrostaticModel(architecture = architecture,
validation/stratified_couette_flow/stratified_couette_flow.jl:               architecture = arch,
validation/mesoscale_turbulence/baroclinic_adjustment.jl:    grid = RectilinearGrid(architecture = arch,
validation/mesoscale_turbulence/baroclinic_adjustment.jl:    model = HydrostaticFreeSurfaceModel(architecture = arch,
validation/mesoscale_turbulence/baroclinic_adjustment.jl:           architecture = arch,
validation/mesoscale_turbulence/eddying_channel_nonhydrostatic.jl:    model = HydrostaticFreeSurfaceModel(architecture = arch,
validation/mesoscale_turbulence/eddying_channel_nonhydrostatic.jl:            architecture = arch,
validation/mesoscale_turbulence/two_dimensional_channel.jl:grid = RectilinearGrid(architecture = arch,
validation/mesoscale_turbulence/two_dimensional_channel.jl:model = IncompressibleModel(architecture = arch,
validation/mesoscale_turbulence/zonally_averaged_channel.jl:grid = RectilinearGrid(architecture = arch,
validation/mesoscale_turbulence/zonally_averaged_channel.jl:model = HydrostaticFreeSurfaceModel(architecture = arch,
validation/mesoscale_turbulence/zonally_averaged_channel.jl:model = NonhydrostaticModel(architecture = arch,
validation/mesoscale_turbulence/eddying_channel.jl:grid = RectilinearGrid(architecture = arch,
validation/mesoscale_turbulence/eddying_channel.jl:model = HydrostaticFreeSurfaceModel(architecture = arch,
validation/mesoscale_turbulence/eddying_channel.jl:model = NonhydrostaticModel(architecture = arch,
validation/mesoscale_turbulence/eddying_channel.jl: grid = RectilinearGrid(architecture = arch,
validation/immersed_boundaries/immersed_bickley_jet.jl:    regular_model = NonhydrostaticModel(architecture = arch,
validation/immersed_boundaries/immersed_bickley_jet.jl:    immersed_model = NonhydrostaticModel(architecture = arch,
validation/immersed_boundaries/cylinder_flow_with_tracer.jl:    immersed_model = NonhydrostaticModel(architecture = arch,
validation/mpi_shallow_water/mpi_shallow_water_turbulence.jl:                  architecture = arch,
benchmark/benchmark_two_dimensional_models.jl:        model = NonhydrostaticModel(architecture = arch,
benchmark/benchmark_lat_lon_hydrostatic_model.jl:                             architecture = arch)
benchmark/benchmark_lat_lon_hydrostatic_model.jl:                             architecture = arch,
benchmark/benchmark_lat_lon_hydrostatic_model.jl:                                    architecture = arch,    
