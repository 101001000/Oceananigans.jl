using Oceananigans.Operators
using Oceananigans.Fields: ZeroField

using Oceananigans.Operators: Œîx_q·∂ú·∂†·∂ú, Œîy_q·∂†·∂ú·∂ú, Œîx·∂†·∂ú·∂ú, Œîy·∂ú·∂†·∂ú, Az_q·∂ú·∂ú·∂ú
using Oceananigans.Advection:
      _advective_momentum_flux_Uu,
      _advective_momentum_flux_Vv,
      upwind_biased_product

import Oceananigans.Advection:
      div_ùêØu,
      div_ùêØv,
      div_ùêØw,
      left_biased_interpolate_x·∂ú·µÉ·µÉ,
      right_biased_interpolate_x·∂ú·µÉ·µÉ,
    left_biased_interpolate_y·µÉ·∂ú·µÉ,
      right_biased_interpolate_y·µÉ·∂ú·µÉ

######
###### Horizontally-vector-invariant formulation of momentum scheme
######
###### Follows https://mitgcm.readthedocs.io/en/latest/algorithm/algorithm.html#vector-invariant-momentum-equations
######

@inbounds Œ∂‚ÇÇw·∂†·∂ú·∂†(i, j, k, grid, u, w) = ‚Ñëx·∂†·µÉ·µÉ(i, j, k, grid, Az_q·∂ú·∂ú·∂ú, w) * ‚àÇz·∂†·∂ú·∂†(i, j, k, grid, u) / Az·∂†·∂ú·∂ú(i, j, k, grid)
@inbounds Œ∂‚ÇÅw·∂ú·∂†·∂†(i, j, k, grid, v, w) = ‚Ñëy·µÉ·∂†·µÉ(i, j, k, grid, Az_q·∂ú·∂ú·∂ú, w) * ‚àÇz·∂ú·∂†·∂†(i, j, k, grid, v) / Az·∂ú·∂†·∂ú(i, j, k, grid)

@inline U_dot_‚àáu(i, j, k, grid, scheme::VectorInvariantSchemes, U) = (
    + vertical_vorticity_U(i, j, k, grid, scheme, U.u, U.v)  # Vertical relative vorticity term
    + bernoulli_head_U(i, j, k, grid, scheme, U.u, U.v) # Bernoulli head term
    + ‚Ñëz·µÉ·µÉ·∂ú(i, j, k, grid, Œ∂‚ÇÇw·∂†·∂ú·∂†, U.u, U.w))  # Horizontal vorticity / vertical advection term

@inline U_dot_‚àáv(i, j, k, grid, scheme::VectorInvariantSchemes, U) = (
    + vertical_vorticity_V(i, j, k, grid, scheme, U.u, U.v) # Vertical relative vorticity term
    + bernoulli_head_V(i, j, k, grid, scheme, U.u, U.v) # Bernoulli head term
    + ‚Ñëz·µÉ·µÉ·∂ú(i, j, k, grid, Œ∂‚ÇÅw·∂ú·∂†·∂†, U.v, U.w)) # Horizontal vorticity / vertical advection term

@inline vertical_vorticity_U(i, j, k, grid, ::VectorInvariant, u, v) = - ‚Ñëy·µÉ·∂ú·µÉ(i, j, k, grid, Œ∂‚ÇÉ·∂†·∂†·∂ú, u, v) * ‚Ñëx·∂†·µÉ·µÉ(i, j, k, grid, ‚Ñëy·µÉ·∂ú·µÉ, Œîx_q·∂ú·∂†·∂ú, v) / Œîx·∂†·∂ú·∂ú(i, j, k, grid) 
@inline vertical_vorticity_V(i, j, k, grid, ::VectorInvariant, u, v) = + ‚Ñëx·∂ú·µÉ·µÉ(i, j, k, grid, Œ∂‚ÇÉ·∂†·∂†·∂ú, u, v) * ‚Ñëy·µÉ·∂†·µÉ(i, j, k, grid, ‚Ñëx·∂ú·µÉ·µÉ, Œîy_q·∂†·∂ú·∂ú, u) / Œîy·∂ú·∂†·∂ú(i, j, k, grid)

@inline bernoulli_head_U(i, j, k, grid, scheme::VectorInvariantSchemes, u, v) = ‚àÇx·∂†·∂ú·∂ú(i, j, k, grid, Kh·∂ú·∂ú·∂ú, scheme, u, v)    
@inline bernoulli_head_V(i, j, k, grid, scheme::VectorInvariantSchemes, u, v) = ‚àÇy·∂ú·∂†·∂ú(i, j, k, grid, Kh·∂ú·∂ú·∂ú, scheme, u, v)  

@inline œï¬≤(i, j, k, grid, œï) = @inbounds œï[i, j, k]^2
@inline Kh·∂ú·∂ú·∂ú(i, j, k, grid, ::VectorInvariantSchemes, u, v) = (‚Ñëx·∂ú·µÉ·µÉ(i, j, k, grid, œï¬≤, u) + ‚Ñëy·µÉ·∂ú·µÉ(i, j, k, grid, œï¬≤, v)) / 2

@inline function vertical_vorticity_U(i, j, k, grid, scheme::WENOVectorInvariant, u, v)
    vÃÇ  =  ‚Ñëxy·∂†·∂ú·µÉ(i, j, k, grid, Œîx_q·∂ú·∂†·∂ú, v)
    Œ∂·¥∏ =  left_biased_interpolate_y·µÉ·∂ú·µÉ(i, j, k, grid, scheme, Œ∂‚ÇÉ·∂†·∂†·∂ú, u, v)
    Œ∂·¥ø = right_biased_interpolate_y·µÉ·∂ú·µÉ(i, j, k, grid, scheme, Œ∂‚ÇÉ·∂†·∂†·∂ú, u, v)
    return - upwind_biased_product(vÃÇ, Œ∂·¥∏, Œ∂·¥ø) / Œîx·∂†·∂ú·∂ú(i, j, k, grid) 
end

@inline function vertical_vorticity_V(i, j, k, grid, scheme::WENOVectorInvariant, u, v)
    uÃÇ  =  ‚Ñëxy·∂ú·∂†·µÉ(i, j, k, grid, Œîy_q·∂†·∂ú·∂ú, u)
    Œ∂·¥∏ =  left_biased_interpolate_x·∂ú·µÉ·µÉ(i, j, k, grid, scheme, Œ∂‚ÇÉ·∂†·∂†·∂ú, u, v)
    Œ∂·¥ø = right_biased_interpolate_x·∂ú·µÉ·µÉ(i, j, k, grid, scheme, Œ∂‚ÇÉ·∂†·∂†·∂ú, u, v)
    return + upwind_biased_product(uÃÇ, Œ∂·¥∏, Œ∂·¥ø) / Œîy·∂ú·∂†·∂ú(i, j, k, grid)
end

######
###### Conservative formulation of momentum advection
######

@inline U_dot_‚àáu(i, j, k, grid, scheme::AbstractAdvectionScheme, U) = div_ùêØu(i, j, k, grid, scheme, U, U.u)
@inline U_dot_‚àáv(i, j, k, grid, scheme::AbstractAdvectionScheme, U) = div_ùêØv(i, j, k, grid, scheme, U, U.v)

@inline div_ùêØu(i, j, k, grid, scheme::VectorInvariantSchemes, U, u) = U_dot_‚àáu(i, j, k, grid, scheme, U)
@inline div_ùêØv(i, j, k, grid, scheme::VectorInvariantSchemes, U, v) = U_dot_‚àáv(i, j, k, grid, scheme, U)

@inline div_ùêØu(i, j, k, grid, scheme::VectorInvariantSchemes, U, ::ZeroField) = zero(eltype(grid))
@inline div_ùêØv(i, j, k, grid, scheme::VectorInvariantSchemes, U, ::ZeroField) = zero(eltype(grid))
@inline div_ùêØw(i, j, k, grid, scheme::VectorInvariantSchemes, U, ::ZeroField) = zero(eltype(grid))

@inline div_ùêØw(i, j, k, grid, scheme::VectorInvariantSchemes, U, w) = zero(eltype(grid))


######
###### No advection
######

@inline U_dot_‚àáu(i, j, k, grid::AbstractGrid{FT}, scheme::Nothing, U) where FT = zero(FT)
@inline U_dot_‚àáv(i, j, k, grid::AbstractGrid{FT}, scheme::Nothing, U) where FT = zero(FT)
